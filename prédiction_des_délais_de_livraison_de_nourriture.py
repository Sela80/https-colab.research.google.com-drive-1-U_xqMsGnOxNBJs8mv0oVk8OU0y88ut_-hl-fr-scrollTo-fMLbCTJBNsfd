# -*- coding: utf-8 -*-
"""Prédiction des délais de livraison de nourriture

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-U_xqMsGnOxNBJs8mv0oVk8OU0y88ut_

**Prédiction des délais de livraison de nourriture à l'aide de Python**
"""

#importion des librairies nécessaires
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

#chemin du Dataset
file_path="/content/deliverytime.txt"

#Lire le Dataset
data=pd.read_csv(file_path)

data.head()

#Types de données
data.dtypes

#informations sur le dataset
data.info()

# vérification de valeur manquante
data.isna().sum()

# Resumer statistiques
data.describe()

"""https://en.wikipedia.org/wiki/Haversine_formula

# Calcul de la distance entre deux latitudes et longitudes

# L'ensemble de données ne comporte aucune fonctionnalité montrant la différence entre le restaurant et le lieu de livraison. Tout ce que nous avons, ce sont les points de latitude et de longitude du restaurant et le lieu de livraison. Nous pouvons utiliser la formule haversine pour calculer la distance entre deux emplacements en fonction de leurs latitudes et longitudes.

 # Vous trouverez ci-dessous comment déterminer la distance entre le restaurant et le lieu de livraison en fonction de leurs latitudes et longitudes en utilisant la **formule haversine** :
"""

# Set the earth's radius (in kilometers)
R = 6371

# Convert degrees to radians
def deg_to_rad(degrees):
    return degrees * (np.pi/180)

# Function to calculate the distance between two points using the haversine formula
def distcalculate(lat1, lon1, lat2, lon2):
    d_lat = deg_to_rad(lat2-lat1)
    d_lon = deg_to_rad(lon2-lon1)
    a = np.sin(d_lat/2)**2 + np.cos(deg_to_rad(lat1)) * np.cos(deg_to_rad(lat2)) * np.sin(d_lon/2)**2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))
    return R * c

# Calculate the distance between each pair of points
data['distance'] = np.nan

for i in range(len(data)):
       data.loc[i, 'distance'] = distcalculate(data.loc[i, 'Restaurant_latitude'],
                                        data.loc[i, 'Restaurant_longitude'],
                                        data.loc[i, 'Delivery_location_latitude'],
                                        data.loc[i, 'Delivery_location_longitude'])

"""# Nous avons maintenant calculé la distance entre le restaurant et le lieu de livraison. Nous avons également ajouté une nouvelle fonctionnalité dans l'ensemble de données sous la forme de distance. Regardons à nouveau l'ensemble de données :


"""

data.head()

"""**Exploration des données**
#Explorons maintenant les données pour trouver les relations entre les fonctionnalités. Je vais commencer par examiner la relation entre la distance et le temps nécessaire pour livrer la nourriture :


"""

figure =px.scatter(data_frame = data,
                    x="distance",
                    y="Time_taken(min)",
                    size="Time_taken(min)",
                    trendline="ols",
                    title = "Relationship Between Distance and Time Taken")
figure.show()

"""# Il existe une relation constante entre le temps nécessaire et la distance parcourue pour livrer la nourriture. Cela signifie que la plupart des livreurs livrent de la nourriture dans un délai de 25 à 30 minutes, quelle que soit la distance.

# Examinons maintenant la relation entre le temps nécessaire à la livraison de la nourriture et l'âge du livreur :
"""

figure = px.scatter(data_frame = data,
                    x="Delivery_person_Age",
                    y="Time_taken(min)",
                    size="Time_taken(min)",
                    color = "distance",
                    trendline="ols",
                    title = "Relationship Between Time Taken and Age")
figure.show()

"""# Il existe une relation linéaire entre le temps nécessaire à la livraison de la nourriture et l'âge du livreur. Cela signifie que les jeunes livreurs mettent moins de temps à livrer la nourriture que les partenaires plus âgés.

# Examinons maintenant la relation entre le temps nécessaire à la livraison de la nourriture et les notes du livreur :


"""

figure = px.scatter(data_frame = data,
                    x="Delivery_person_Ratings",
                    y="Time_taken(min)",
                    size="Time_taken(min)",
                    color = "distance",
                    trendline="ols",
                    title = "Relationship Between Time Taken and Ratings")
figure.show()

"""# Il existe une relation linéaire inverse entre le temps nécessaire à la livraison de la nourriture et les notes du livreur. Cela signifie que les partenaires de livraison avec des notes plus élevées mettent moins de temps à livrer la nourriture que les partenaires avec des notes faibles.

# Voyons maintenant si le type de nourriture commandé par le client et le type de véhicule utilisé par le livreur affectent ou non le délai de livraison :
"""

fig = px.box(data,
             x="Type_of_vehicle",
             y="Time_taken(min)",
             color="Type_of_order")
fig.show()

"""# Il n’y a donc pas beaucoup de différence entre le temps pris par les livreurs selon le véhicule qu’ils conduisent et le type de nourriture qu’ils livrent.

# Ainsi, les caractéristiques qui contribuent le plus au délai de livraison des aliments selon notre analyse sont :

# âge du livreur
# évaluations du partenaire de livraison
# distance entre le restaurant et le lieu de livraison
#Dans la section ci-dessous, je vais vous expliquer comment former un modèle d'apprentissage automatique pour la prédiction des délais de livraison des aliments.

# Modèle de prévision des délais de livraison des aliments
#Entraîneons maintenant un modèle d'apprentissage automatique à l'aide d'un modèle de réseau neuronal LSTM pour la tâche de prédiction des délais de livraison des aliments :
"""

#splitting data
from sklearn.model_selection import train_test_split
x = np.array(data[["Delivery_person_Age",
                   "Delivery_person_Ratings",
                   "distance"]])
y = np.array(data[["Time_taken(min)"]])
xtrain, xtest, ytrain, ytest = train_test_split(x, y,
                                                test_size=0.10,
                                                random_state=42)

# creating the LSTM neural network model
from keras.models import Sequential
from keras.layers import Dense, LSTM
model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape= (xtrain.shape[1], 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))
model.summary()

# training the model
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(xtrain, ytrain, batch_size=1, epochs=9)

"""# Testons maintenant les performances de notre modèle en donnant des entrées pour prédire le délai de livraison des aliments :"""

print("Food Delivery Time Prediction")
a = int(input("Age of Delivery Partner: "))
b = float(input("Ratings of Previous Deliveries: "))
c = int(input("Total Distance: "))

features = np.array([[a, b, c]])
print("Predicted Delivery Time in Minutes = ", model.predict(features))

"""# C'est ainsi que vous pouvez utiliser le Machine Learning pour la tâche de prédiction des délais de livraison des aliments à l'aide du langage de programmation Python

# Résumé
# Pour prédire l'heure de livraison des aliments en temps réel, vous devez calculer la distance entre le point de préparation des aliments et le point de consommation des aliments. Après avoir trouvé la distance entre le restaurant et les lieux de livraison, vous devez trouver des relations entre le temps mis par les livreurs pour livrer la nourriture dans le passé sur la même distance. J'espère que vous avez aimé cet article sur la prédiction des délais de livraison des repas avec le Machine Learning utilisant Python. N'hésitez pas à poser des questions précieuses dans la section commentaires ci-dessous.
"""

